apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector # https://github.com/open-telemetry/opentelemetry-operator/blob/main/docs/api.md#opentelemetrycollector
metadata:
  name: otel-collector-metrics
  namespace: observability
spec:
  mode: deployment # statefulset is the only allowed mode with targetAllocator
  serviceAccount: collector-ta
  env:
    - name: GOMEMLIMIT
      value: 205MiB # should be 80% of memory limit

  # https://opentelemetry.io/docs/kubernetes/operator/target-allocator/
  # https://github.com/open-telemetry/opentelemetry-operator/blob/main/cmd/otel-allocator/README.md
  # Migration blocked, can not scrape all target because of https://github.com/open-telemetry/opentelemetry-operator/issues/1844
  # https://github.com/open-telemetry/opentelemetry-operator/blob/main/docs/api.md#opentelemetrycollectorspectargetallocator
  # targetAllocator:
  #   enabled: true
  #   serviceAccount: opentelemetry-targetallocator-sa
  #   prometheusCR:
  #     enabled: true
  #     serviceMonitorSelector:
  #       matchLabels:
  #         prometheus.io/scrap-with: otel-collector-metrics
  #     podMonitorSelector:
  #       matchLabels:
  #         prometheus.io/scrap-with: otel-collector-metrics
  #   resources:
  #     requests:
  #       memory: 256Mi
  #       cpu: 100m
  #     limits:
  #       memory: 256Mi
  #       cpu: 100m

  autoscaler:
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilization: 80
    targetMemoryUtilization: 80

  resources:
    requests:
      memory: 256Mi
      cpu: 200m
    limits:
      memory: 256Mi
      cpu: 200m

  config: |
    receivers:
      otlp:
        protocols:
          grpc: :4318

      prometheus:
        config:
          scrape_configs:
            - job_name: otel-collector-metrics
              scrape_interval: 10s
              static_configs:
                - targets: 
                    - :8888
    exporters:
      # debug:
      #   verbosity: detailed

      otlphttp/prometheus:
        endpoint: http://kube-prometheus-stack-prometheus.observability:9090/api/v1/otlp
        tls:
          insecure: true

      prometheusremotewrite:
        resource_to_telemetry_conversion: 
          enabled: true
        tls:
          insecure: true

    processors:
      k8sattributes:
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection

      batch:
        timeout: 200ms
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25

    extensions:
      health_check:
      pprof:
      zpages:
      
    service:
      extensions: [health_check, pprof, zpages]
      telemetry:
        # logs:
        #   encoding: json
        metrics:
          level: basic # expose collector metrics on port 8888
          address: :8888

      pipelines:
        metrics:
          receivers: [prometheus, otlp]
          processors: [k8sattributes, resource, batch, memory_limiter]
          exporters: [prometheusremotewrite, debug]

  # https://www.otelbin.io/
  # config: |
  #   receivers:
  #     otlp:
  #       protocols:
  #         grpc: 0.0.0.0:4318

  #     # Scrape collector metrics
  #     prometheus:
  #       # trim_metric_suffixes: true # singing_duration_seconds_total to be trimmed to singing_duration
  #       config:
  #         scrape_configs:
  #           - job_name: otel-collector-metrics
  #             scrape_interval: 10s
  #             static_configs:
  #               - targets: [":8888"]

  #   processors:
  #     # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md#resource-detection-processor
  #     resource:
  #       attributes:
  #       - key: collector.name
  #         value: "otel-collector-metrics"
  #         action: upsert

  #     # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/k8sattributesprocessor/README.md
  #     k8sattributes:
  #       extract:
  #         metadata:
  #         - k8s.namespace.name
  #         - k8s.deployment.name
  #         - k8s.statefulset.name
  #         - k8s.daemonset.name
  #         - k8s.cronjob.name
  #         - k8s.job.name
  #         - k8s.node.name
  #         - k8s.pod.name
  #         - k8s.pod.uid
  #       passthrough: false
  #       pod_association:
  #       - sources:
  #         - from: resource_attribute
  #           name: k8s.pod.ip
  #       - sources:
  #         - from: resource_attribute
  #           name: k8s.pod.uid
  #       - sources:
  #         - from: connection

  #     batch:
  #       timeout: 200ms
  #     memory_limiter: # drop metrics if memory usage gets too high
  #       check_interval: 5s
  #       limit_percentage: 80
  #       spike_limit_percentage: 25
      
  #   exporters:
  #     debug:
  #       verbosity: detailed

  #     # Use this exporter if you want to send otlp metrics to prometheus.
  #     otlphttp/prometheus:
  #       endpoint: http://kube-prometheus-stack-prometheus.observability:9090/api/v1/otlp
  #       tls:
  #         insecure: true

  #     prometheusremotewrite:
  #       endpoint: http://kube-prometheus-stack-prometheus.observability:9090/api/v1/write
  #       # Add k8sattributes to metric labels (be very carefull with quantity of labels, by default java agent sends lots of resource labels)
  #       resource_to_telemetry_conversion: 
  #         enabled: true
  #       tls:
  #         insecure: true

  #   # add healthcheck, debugging port and pprof endpoints
  #   extensions:
  #     health_check:
  #     pprof:
  #     zpages:
      
  #   service:
  #     extensions: [health_check, pprof, zpages]
  #     telemetry:
  #       logs:
  #         encoding: json
  #         # level: debug
  #       metrics:
  #         level: basic # expose collector metrics on port 8888
  #         address: :8888

  #     pipelines:
  #       metrics:
  #         receivers: [prometheus, otlp]
  #         processors: [k8sattributes, resource, batch, memory_limiter]
  #         exporters: [prometheusremotewrite, debug]