apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector # https://github.com/open-telemetry/opentelemetry-operator/blob/main/docs/api.md#opentelemetrycollector
metadata:
  name: otel-collector-metrics
  namespace: observability
spec:
  mode: statefulset # Only allowed mode with targetAllocator
  serviceAccount: collector-ta
  env:
    - name: GOMEMLIMIT
      value: 205MiB # should be 80% of memory limit

  # https://opentelemetry.io/docs/kubernetes/operator/target-allocator/
  # https://github.com/open-telemetry/opentelemetry-operator/blob/main/cmd/otel-allocator/README.md
  # Migration blocked, can not scrape all target because of https://github.com/open-telemetry/opentelemetry-operator/issues/1844
  # https://github.com/open-telemetry/opentelemetry-operator/blob/main/docs/api.md#opentelemetrycollectorspectargetallocator
  # targetAllocator:
  #   enabled: true
  #   serviceAccount: opentelemetry-targetallocator-sa
  #   prometheusCR:
  #     enabled: true
  #     serviceMonitorSelector:
  #       matchLabels:
  #         prometheus.io/scrap-with: otel-collector-metrics
  #     podMonitorSelector:
  #       matchLabels:
  #         prometheus.io/scrap-with: otel-collector-metrics
    
    # resources:
    #   requests:
    #     memory: 256Mi
    #     cpu: 100m
    #   limits:
    #     memory: 256Mi
    #     cpu: 100m

  autoscaler:
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilization: 80
    targetMemoryUtilization: 80

  resources:
    requests:
      memory: 256Mi
      cpu: 200m
    limits:
      memory: 256Mi
      cpu: 200m


  # https://www.otelbin.io/
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:

      # Scrape collector metrics
      # prometheus:
      #   # trim_metric_suffixes: true # singing_duration_seconds_total to be trimmed to singing_duration
      #   config:
      #     scrape_configs:
      #       - job_name: 'otel-collector-metrics'
      #         scrape_interval: 10s
      #         static_configs:
      #           - targets: [":8888"]

    processors:
      k8sattributes:
      batch:
        timeout: 200ms
      memory_limiter: # drop metrics if memory usage gets too high
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15

    exporters:
      debug:

      # Use this exporter if you want to send otlp metrics to prometheus.
      otlphttp/prometheus:
        endpoint: http://kube-prometheus-stack-prometheus.observability:9090/api/v1/otlp
        tls:
          insecure: true

      prometheusremotewrite:
        endpoint: http://kube-prometheus-stack-prometheus.observability:9090/api/v1/write
        tls:
          insecure: true

    # add healthcheck, debugging port and pprof endpoints
    extensions:
      health_check:
      pprof:
      zpages:
      
    service:
      extensions: [health_check, pprof, zpages]
      # telemetry:
      #   logs:
      #     encoding: json
      #   metrics:
      #     level: basic # expose collector metrics on port 8888

      pipelines:
        metrics:
          receivers: [otlp, prometheus]
          processors: [k8sattributes, batch, memory_limiter]
          exporters: [prometheusremotewrite, debug]