apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector # https://github.com/open-telemetry/opentelemetry-operator/blob/main/docs/api.md#opentelemetrycollector
metadata:
  name: otel-collector-metrics
  namespace: observability
spec:
  mode: deployment # statefulset is the only allowed mode with targetAllocator
  serviceAccount: collector-ta
  env:
    - name: GOMEMLIMIT
      value: 205MiB # should be 80% of memory limit

  # https://opentelemetry.io/docs/kubernetes/operator/target-allocator/
  # https://github.com/open-telemetry/opentelemetry-operator/blob/main/cmd/otel-allocator/README.md
  # Migration blocked, can not scrape all target because of https://github.com/open-telemetry/opentelemetry-operator/issues/1844
  # https://github.com/open-telemetry/opentelemetry-operator/blob/main/docs/api.md#opentelemetrycollectorspectargetallocator
  # targetAllocator:
  #   enabled: true
  #   serviceAccount: opentelemetry-targetallocator-sa
  #   prometheusCR:
  #     enabled: true
  #     serviceMonitorSelector:
  #       matchLabels:
  #         prometheus.io/scrap-with: otel-collector-metrics
  #     podMonitorSelector:
  #       matchLabels:
  #         prometheus.io/scrap-with: otel-collector-metrics
  #   resources:
  #     requests:
  #       memory: 256Mi
  #       cpu: 100m
  #     limits:
  #       memory: 256Mi
  #       cpu: 100m

  autoscaler:
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilization: 80
    targetMemoryUtilization: 80

  resources:
    requests:
      memory: 256Mi
      cpu: 200m
    limits:
      memory: 256Mi
      cpu: 200m

  # https://www.otelbin.io/
  config: |
    receivers:
      otlp:
        protocols:
          grpc:

      # Scrape collector metrics
      prometheus:
        # trim_metric_suffixes: true # singing_duration_seconds_total to be trimmed to singing_duration
        config:
          scrape_configs:
            - job_name: otel-collector-metrics
              scrape_interval: 30s
              static_configs:
                - targets: [":8888"]

    processors:
      # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md#resource-detection-processor
      resource:
        attributes:
          - key: collector.name
            value: "otel-collector-metrics"
            action: upsert

      # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/k8sattributesprocessor/README.md
      k8sattributes:
        extract:
          metadata:
            - k8s.node.name
            - k8s.namespace.name
            - k8s.deployment.name
            - k8s.pod.name
            - k8s.container.name
          labels:
            - tag_name: component
              key: app.kubernetes.io/component
              from: pod
            - tag_name: application
              key: app.kubernetes.io/application
              from: pod
        passthrough: false
        pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.ip
          - sources:
            - from: resource_attribute
              name: k8s.pod.uid
          - sources:
            - from: connection

      # Used to keep backwards compatibility with old prometheus metric names
      metricstransform:
        transforms:
          - include: k8s.node.name
            action: update
            new_name: node
          - include: k8s.namespace.name
            action: rename
            new_name: namespace
          - include: k8s.deployment.name
            action: rename
            new_name: deployment
          - include: k8s.pod.name
            action: rename
            new_name: pod
          - include: k8s.container.name
            action: rename
            new_name: container

      batch:
        timeout: 200ms
      memory_limiter: # drop metrics if memory usage gets too high
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      
    exporters:
      debug:
        verbosity: detailed

      # Use this exporter if you want to send otlp metrics to prometheus.
      otlphttp/prometheus:
        endpoint: http://kube-prometheus-stack-prometheus.observability:9090/api/v1/otlp
        tls:
          insecure: true

      prometheusremotewrite:
        endpoint: http://kube-prometheus-stack-prometheus.observability:9090/api/v1/write
        # Add k8sattributes to metric labels (be very carefull with quantity of labels, by default java agent sends lots of resource labels)
        resource_to_telemetry_conversion: 
          enabled: true
        tls:
          insecure: true

    # add healthcheck, debugging port and pprof endpoints
    extensions:
      health_check:
      pprof:
      zpages:
      
    service:
      extensions: [health_check, pprof, zpages]
      telemetry:
        logs:
          # encoding: json
          # level: debug
        metrics:
          level: basic # expose collector metrics on port 8888
          address: :8888

      pipelines:
        metrics:
          receivers: [prometheus, otlp]
          processors: [k8sattributes, metricstransform, resource, batch, memory_limiter]
          exporters: [prometheusremotewrite, debug]