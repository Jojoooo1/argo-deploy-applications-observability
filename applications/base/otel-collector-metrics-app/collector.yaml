apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector # https://github.com/open-telemetry/opentelemetry-operator/blob/main/docs/api.md#opentelemetrycollector
metadata:
  name: otel-collector-metrics
  namespace: observability
spec:
  mode: statefulset # Only allowed mode with targetAllocator
  serviceAccount: collector-ta
  env:
    - name: GOMEMLIMIT
      value: 205MiB # should be 80% of memory limit

  # https://opentelemetry.io/docs/kubernetes/operator/target-allocator/
  # https://github.com/open-telemetry/opentelemetry-operator/blob/main/cmd/otel-allocator/README.md
  # Migration blocked, can not scrape all target because of https://github.com/open-telemetry/opentelemetry-operator/issues/1844
  # https://github.com/open-telemetry/opentelemetry-operator/blob/main/docs/api.md#opentelemetrycollectorspectargetallocator
  # targetAllocator:
  #   enabled: true
  #   serviceAccount: opentelemetry-targetallocator-sa
  #   prometheusCR:
  #     enabled: true
  #     serviceMonitorSelector:
  #       matchLabels:
  #         prometheus.io/scrap-with: otel-collector-metrics
  #     podMonitorSelector:
  #       matchLabels:
  #         prometheus.io/scrap-with: otel-collector-metrics
    
    # resources:
    #   requests:
    #     memory: 256Mi
    #     cpu: 100m
    #   limits:
    #     memory: 256Mi
    #     cpu: 100m

  autoscaler:
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilization: 80
    targetMemoryUtilization: 80

  resources:
    requests:
      memory: 256Mi
      cpu: 200m
    limits:
      memory: 256Mi
      cpu: 200m


  # https://www.otelbin.io/
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:

      # Scrape collector metrics
      prometheus:
        # trim_metric_suffixes: true # singing_duration_seconds_total to be trimmed to singing_duration
        config:
          scrape_configs:
            - job_name: 'otel-collector-metrics'
              scrape_interval: 10s
              static_configs:
                - targets: [":8888"]

    processors:
      # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md#resource-detection-processor
      resource:
        attributes:
        - key: collector.name
          value: "otel-collector-metrics"
          action: upsert

      k8sattributes:
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection

      batch:
        timeout: 200ms
      memory_limiter: # drop metrics if memory usage gets too high
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      
    exporters:
      debug:
        verbosity: detailed

      # Use this exporter if you want to send otlp metrics to prometheus.
      otlphttp/prometheus:
        endpoint: http://kube-prometheus-stack-prometheus.observability:9090/api/v1/otlp
        tls:
          insecure: true

      prometheusremotewrite:
        endpoint: http://kube-prometheus-stack-prometheus.observability:9090/api/v1/write
        # Add k8sattributes to metric label
        # Metric example need to ne filtered! Or use OTEL_JAVA_DISABLED_RESOURCE_PROVIDERS=io.opentelemetry.instrumentation.resources.ProcessArguments,ProcessResource
        # https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions/autoconfigure#disabling-automatic-resourceproviders
        # http_server_request_duration_seconds_count{host_arch="amd64", host_name="api-5bc96c6776-tftc7", http_request_method="GET", http_response_status_code="404", http_route="/*", job="api", k8s_namespace_name="cloud-diplomats", k8s_node_name="jonathan-xps-15-9500", k8s_pod_ip="10.42.0.53", k8s_pod_name="api-5bc96c6776-tftc7", k8s_pod_start_time="2024-03-23T18:35:32Z", k8s_pod_uid="2eb3edd6-c6e1-4fbd-a59e-22e7da4b1007", network_protocol_version="1.1", os_description="Linux 6.5.0-26-generic", os_type="linux", process_command_args="["/layers/paketo-buildpacks_bellsoft-liberica/jre/bin/java","org.springframework.boot.loader.launch.JarLauncher"]", process_executable_path="/layers/paketo-buildpacks_bellsoft-liberica/jre/bin/java", process_pid="1", process_runtime_description="BellSoft OpenJDK 64-Bit Server VM 21.0.2+14-LTS", process_runtime_name="OpenJDK Runtime Environment", process_runtime_version="21.0.2+14-LTS", service_name="api", telemetry_distro_name="opentelemetry-java-instrumentation", telemetry_distro_version="2.2.0", telemetry_sdk_language="java", telemetry_sdk_name="opentelemetry", telemetry_sdk_version="1.36.0", url_scheme="http"}
        resource_to_telemetry_conversion: 
          enabled: true
        tls:
          insecure: true

    # add healthcheck, debugging port and pprof endpoints
    extensions:
      health_check:
      pprof:
      zpages:
      
    service:
      extensions: [health_check, pprof, zpages]
      telemetry:
        logs:
          # encoding: json
          level: debug
        metrics:
          level: basic # expose collector metrics on port 8888
          address: :8888

      pipelines:
        metrics:
          receivers: [prometheus, otlp]
          processors: [resource, k8sattributes, batch] # memory_limiter
          exporters: [prometheusremotewrite, debug]