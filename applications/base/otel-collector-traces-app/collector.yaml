apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector-traces
  namespace: observability

# https://github.com/open-telemetry/opentelemetry-operator/blob/main/docs/api.md
spec:
  mode: deployment
  serviceAccount: collector
  env:        
    - name: GOMEMLIMIT
      value: 205MiB # should be 80% of memory limit

  autoscaler:
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilization: 80
    targetMemoryUtilization: 80

  resources:
    requests:
      memory: 256Mi
      cpu: 200m
    limits:
      memory: 256Mi
      cpu: 200m

  # https://www.otelbin.io/
  config: |
    # if you are using tempo disable tempo.metricsGenerator
    connectors:
      # Adapted to use spring micrometer tracing (migrate to otel sdk for better integration)
      # spanmetrics:
      #   namespace: span.metrics # necessary for spanmetrics to work (probably a bug in the collector)

      #   exclude_dimensions: ['status.code']
      #   dimensions:
      #     - name: outcome
      #     - name: status
      #     - name: http.url
      #     - name: uri
      #     - name: exception
        
      #   # Create span_metrics_events_total containing span.event content
      #   # events:
      #   #   enabled: true
      #   #   dimensions:
      #   #     - name: exception.type
      #   #     - name: exception.message
          
    receivers:
      otlp:
        protocols:
          grpc:
          http:

      # Scrape collector metrics
      prometheus:
        # trim_metric_suffixes: true # singing_duration_seconds_total to be trimmed to singing_duration
        config:
          scrape_configs:
            - job_name: 'otel-collector-traces'
              scrape_interval: 10s
              static_configs:
                - targets: [":8888"]

    processors:
      k8sattributes:
      batch:
        timeout: 200ms
      memory_limiter: # drop metrics if memory usage gets too high
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15

    exporters:
      debug:

      otlp:
        endpoint: tempo.observability:4317
        tls:
          insecure: true

      # Use this exporter if you want to send otlp metrics to prometheus.
      otlphttp/prometheus:
        endpoint: http://kube-prometheus-stack-prometheus.observability:9090/api/v1/otlp
        tls:
          insecure: true

      prometheusremotewrite:
        endpoint: http://kube-prometheus-stack-prometheus.observability:9090/api/v1/write
        tls:
          insecure: true
        target_info:  # necessary for spanmetrics
          enabled: true

    # add healthcheck, debugging port and pprof endpoints
    extensions: [health_check, zpages, pprof]

    service:
      telemetry:
        logs:
          encoding: json
        metrics:
          level: basic # expose collector metrics on port 8888

      pipelines:
        traces:
          receivers: [otlp]
          processors: [k8sattributes, batch, memory_limiter]
          exporters: [otlp, spanmetrics, debug]
        metrics:
          receivers: [prometheus, spanmetrics]
          processors: [k8sattributes, batch, memory_limiter]
          exporters: [prometheusremotewrite, debug]