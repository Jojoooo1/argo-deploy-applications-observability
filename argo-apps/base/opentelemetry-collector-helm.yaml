apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: opentelemetry-collector-helm
  namespace: argocd

  # Add this finalizer ONLY if you want these to cascade delete (A cascade delete, deletes both the app and its resources, rather than only the app.)
  # finalizers:
  #   - resources-finalizer.argocd.argoproj.io

spec:
  project: default
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground

    # automated:
    #   prune: true
    #   selfHeal: true

  source:
    chart: opentelemetry-collector
    repoURL: https://open-telemetry.github.io/opentelemetry-helm-charts
    targetRevision: 0.75.1

    # https://github.com/open-telemetry/opentelemetry-helm-charts/tree/main/charts/opentelemetry-collector
    helm:
      valuesObject:
        fullnameOverride: opentelemetry-collector
        mode: daemonset

        presets:

          # Best used with mode = daemonset.
          # See https://opentelemetry.io/docs/kubernetes/collector/components/#filelog-receiver
          logsCollection:
            enabled: false

          # Best used with mode = daemonset.
          # See https://opentelemetry.io/docs/kubernetes/collector/components/#kubernetes-attributes-processor
          # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/k8sattributesprocessor/README.md
          kubernetesAttributes:
            enabled: false

          # Best used with mode = daemonset.
          # See https://opentelemetry.io/docs/kubernetes/collector/components/#host-metrics-receiver
          # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/hostmetricsreceiver
          # metrics about the host system scraped from various sources
          # Note: overlap with the kubeletMetrics
          hostMetrics:
            enabled: false

          # Best used with mode = daemonset.
          # See https://opentelemetry.io/docs/kubernetes/collector/components/#kubeletstats-receiver
          # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/kubeletstatsreceiver
          # node, pod, container and volume metrics
          # Note: overlap with the hostMetrics, to be preferred.
          kubeletMetrics:
            enabled: false

          # Best used with mode = deployment or statefulset / DaemonSet will result in duplicate data
          # See https://opentelemetry.io/docs/kubernetes/collector/components/#kubernetes-objects-receiver
          # Equivalent to kube-state-metrics
          kubernetesEvents:
            enabled: false
            
          # Best used with mode = deployment or statefulset. / DaemonSet will result in duplicate data
          # See https://opentelemetry.io/docs/kubernetes/collector/components/#kubernetes-cluster-receiver
          # https://github.com/open-telemetry/OpenTelemetry-Collector-contrib/tree/main/receiver/k8sclusterreceiver
          # Report pod phases, node conditions, and cluster-level resource usage.
          clusterMetrics:
              enabled: false

        config:

          extensions:
            health_check: {}
            memory_ballast: {}

          exporters:
            debug: {}
            
          processors:
            batch: {}
            # If set to null, will be overridden with values based on k8s resource limits
            memory_limiter: null
          
          receivers:
            jaeger:
              protocols:
                grpc:
                  endpoint: ${env:MY_POD_IP}:14250
                thrift_http:
                  endpoint: ${env:MY_POD_IP}:14268
                thrift_compact:
                  endpoint: ${env:MY_POD_IP}:6831
            otlp:
              protocols:
                grpc:
                  endpoint: ${env:MY_POD_IP}:4317
                http:
                  endpoint: ${env:MY_POD_IP}:4318
            prometheus:
              config:
                scrape_configs:
                  - job_name: opentelemetry-collector
                    scrape_interval: 10s
                    static_configs:
                      - targets:
                          - ${env:MY_POD_IP}:8888
            zipkin:
              endpoint: ${env:MY_POD_IP}:9411

          service:
            telemetry:
              metrics:
                address: ${env:MY_POD_IP}:8888
            extensions:
              - health_check
              - memory_ballast
            pipelines:
              logs:
                exporters:
                  - debug
                processors:
                  - memory_limiter
                  - batch
                receivers:
                  - otlp
              metrics:
                exporters:
                  - debug
                processors:
                  - memory_limiter
                  - batch
                receivers:
                  - otlp
                  - prometheus
              traces:
                exporters:
                  - debug
                processors:
                  - memory_limiter
                  - batch
                receivers:
                  - otlp
                  - jaeger
                  - zipkin

          # resources: 
          #   limits:
          #     cpu: 250m
          #     memory: 512Mi
          #   requests:
          #     cpu: 250m
          #     memory: 512Mi

  destination:
    server: "https://kubernetes.default.svc"
    namespace: observability


